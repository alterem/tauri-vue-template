name: Build and Release Tauri App

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Clean Tauri WiX Cache
        run: |
          Remove-Item -Path "$env:LOCALAPPDATA\tauri\WixTools*" -Recurse -Force -ErrorAction SilentlyContinue
        shell: pwsh

      - name: Build Windows
        run: pnpm tauri build --target x86_64-pc-windows-msvc
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle/msi/*.msi

  build-linux:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-gnu
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libayatana-appindicator3-dev librsvg2-dev
      - name: Build Linux
        run: pnpm tauri build --target x86_64-unknown-linux-gnu
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: src-tauri/target/x86_64-unknown-linux-gnu/release/bundle/*/*

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-apple-darwin, x86_64-apple-darwin
      - name: Install Dependencies
        run: pnpm install --frozen-lockfile
      - name: Build macOS (Apple Silicon)
        run: pnpm tauri build --target aarch64-apple-darwin
      - name: Build macOS (Intel)
        run: pnpm tauri build --target x86_64-apple-darwin
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            src-tauri/target/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            src-tauri/target/x86_64-apple-darwin/release/bundle/dmg/*.dmg

  release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate Changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "::debug::Previous tag found: '$PREVIOUS_TAG'"

          CHANGELOG_CONTENT=""
          GIT_LOG_COMMAND=""

          if [ -z "$PREVIOUS_TAG" ]; then
            GIT_LOG_COMMAND='git log --pretty=format:"* %s (%h)"'
            CHANGELOG_CONTENT=$(git log --pretty=format:"* %s (%h)")
          else
            GIT_LOG_COMMAND="git log --pretty=format:\"* %s (%h)\" $PREVIOUS_TAG..HEAD"
            CHANGELOG_CONTENT=$(git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD)
          fi
          echo "::debug::Executing command: $GIT_LOG_COMMAND"
          echo "::debug::Raw git log output:"
          echo "$CHANGELOG_CONTENT"
          echo "::debug::End of raw git log output."
          DELIMITER=$(openssl rand -hex 8) 
          echo "::debug::Writing to GITHUB_OUTPUT with delimiter $DELIMITER"
          printf "%s<<%s\n%s\n%s\n" "CHANGELOG" "$DELIMITER" "$CHANGELOG_CONTENT" "$DELIMITER" >> "$GITHUB_OUTPUT"
          echo "::debug::Finished writing to GITHUB_OUTPUT."
        shell: bash

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List Files
        run: find artifacts -type f | sort

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-build/*.msi
            artifacts/linux-build/deb/*.deb
            artifacts/linux-build/rpm/*.rpm
            artifacts/linux-build/appimage/*.AppImage
            artifacts/macos-build/aarch64-apple-darwin/release/bundle/dmg/*.dmg
            artifacts/macos-build/x86_64-apple-darwin/release/bundle/dmg/*.dmg
          name: Release ${{ github.ref_name }}
          body: |
            ### Release ${{ github.ref_name }}
            
            #### Changelog
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ---
            
            See the assets below for the builds.
          draft: false
          prerelease: false